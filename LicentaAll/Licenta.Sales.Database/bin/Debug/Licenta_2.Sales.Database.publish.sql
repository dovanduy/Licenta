/*
Deployment script for LicentaSales

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "LicentaSales"
:setvar DefaultFilePrefix "LicentaSales"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'The following operation was generated from a refactoring log file 40989298-5e72-4b9c-badc-283a90ce9455';

PRINT N'Rename [dbo].[Product].[ProductId] to Id';


GO
EXECUTE sp_rename @objname = N'[dbo].[Product].[ProductId]', @newname = N'Id', @objtype = N'COLUMN';


GO
PRINT N'The following operation was generated from a refactoring log file b89439f0-e83e-4b55-9fce-3c70bf65dc89';

PRINT N'Rename [dbo].[Sale].[SaleId] to Id';


GO
EXECUTE sp_rename @objname = N'[dbo].[Sale].[SaleId]', @newname = N'Id', @objtype = N'COLUMN';


GO
PRINT N'The following operation was generated from a refactoring log file 5d3d52aa-0780-4810-a2df-1c03779cf251';

PRINT N'Rename [dbo].[SaleStatusLookup].[SaleStatusId] to Id';


GO
EXECUTE sp_rename @objname = N'[dbo].[SaleStatusLookup].[SaleStatusId]', @newname = N'Id', @objtype = N'COLUMN';


GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '40989298-5e72-4b9c-badc-283a90ce9455')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('40989298-5e72-4b9c-badc-283a90ce9455')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b89439f0-e83e-4b55-9fce-3c70bf65dc89')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b89439f0-e83e-4b55-9fce-3c70bf65dc89')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5d3d52aa-0780-4810-a2df-1c03779cf251')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5d3d52aa-0780-4810-a2df-1c03779cf251')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

MERGE INTO dbo.SaleStatusLookup AS Target  
USING (VALUES (1,'Projected'), 
			(2, 'Definitive'), 
			(3, 'Canceled'))  
       AS Source (SaleStatusId, Name)  
ON Target.SaleStatusId = Source.SaleStatusId  
WHEN MATCHED THEN  
	UPDATE SET Name = Source.Name  
WHEN NOT MATCHED BY TARGET THEN  
	INSERT (SaleStatusId, Name) VALUES (SaleStatusId, Name)
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO

GO
PRINT N'Update complete.';


GO
