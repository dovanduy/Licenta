/*
Deployment script for LicentaSales

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "LicentaSales"
:setvar DefaultFilePrefix "LicentaSales"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping [dbo].[DF_Sale_StatusId]...';


GO
ALTER TABLE [dbo].[Sale] DROP CONSTRAINT [DF_Sale_StatusId];


GO
PRINT N'Dropping [dbo].[DF_Sale_Date_Created]...';


GO
ALTER TABLE [dbo].[Sale] DROP CONSTRAINT [DF_Sale_Date_Created];


GO
PRINT N'Dropping [dbo].[FK_Sale_SaleStatus]...';


GO
ALTER TABLE [dbo].[Sale] DROP CONSTRAINT [FK_Sale_SaleStatus];


GO
PRINT N'Starting rebuilding table [dbo].[Product]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Product] (
    [ProductId]    INT   NOT NULL,
    [Price]        MONEY NOT NULL,
    [Row_Version]  INT   DEFAULT 1 NOT NULL,
    [Date_Deleted] DATE  NULL,
    PRIMARY KEY CLUSTERED ([ProductId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Product])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Product] ([ProductId], [Price])
        SELECT   [ProductId],
                 [Price]
        FROM     [dbo].[Product]
        ORDER BY [ProductId] ASC;
    END

DROP TABLE [dbo].[Product];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Product]', N'Product';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Sale]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Sale] (
    [SaleId]             INT            IDENTITY (1, 1) NOT NULL,
    [ProductId]          INT            NOT NULL,
    [Items]              INT            NOT NULL,
    [Price]              MONEY          NOT NULL,
    [SpecialOfferId]     INT            NULL,
    [PercentageDiscount] DECIMAL (4, 2) NULL,
    [UserId]             VARCHAR (500)  NOT NULL,
    [OrderId]            INT            NOT NULL,
    [StatusId]           INT            CONSTRAINT [DF_Sale_StatusId] DEFAULT ((1)) NOT NULL,
    [Date_Created]       DATE           CONSTRAINT [DF_Sale_Date_Created] DEFAULT (getdate()) NOT NULL,
    [Date_StatusChanged] DATE           NULL,
    [Date_Deleted]       DATE           NULL,
    [Row_Version]        INT            DEFAULT 1 NOT NULL,
    PRIMARY KEY CLUSTERED ([SaleId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Sale])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Sale] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Sale] ([SaleId], [ProductId], [Items], [Price], [SpecialOfferId], [PercentageDiscount], [UserId], [OrderId], [StatusId], [Date_Created], [Date_StatusChanged])
        SELECT   [SaleId],
                 [ProductId],
                 [Items],
                 [Price],
                 [SpecialOfferId],
                 [PercentageDiscount],
                 [UserId],
                 [OrderId],
                 [StatusId],
                 [Date_Created],
                 [Date_StatusChanged]
        FROM     [dbo].[Sale]
        ORDER BY [SaleId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Sale] OFF;
    END

DROP TABLE [dbo].[Sale];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Sale]', N'Sale';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[SaleStatusLookup]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_SaleStatusLookup] (
    [SaleStatusId] INT          NOT NULL,
    [Name]         VARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([SaleStatusId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[SaleStatusLookup])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_SaleStatusLookup] ([SaleStatusId], [Name])
        SELECT   [SaleStatusId],
                 [Name]
        FROM     [dbo].[SaleStatusLookup]
        ORDER BY [SaleStatusId] ASC;
    END

DROP TABLE [dbo].[SaleStatusLookup];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_SaleStatusLookup]', N'SaleStatusLookup';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[FK_Sale_SaleStatus]...';


GO
ALTER TABLE [dbo].[Sale] WITH NOCHECK
    ADD CONSTRAINT [FK_Sale_SaleStatus] FOREIGN KEY ([StatusId]) REFERENCES [dbo].[SaleStatusLookup] ([SaleStatusId]);


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

MERGE INTO dbo.SaleStatusLookup AS Target  
USING (VALUES (1,'Projected'), 
			(2, 'Definitive'), 
			(3, 'Canceled'))  
       AS Source (SaleStatusId, Name)  
ON Target.SaleStatusId = Source.SaleStatusId  
WHEN MATCHED THEN  
	UPDATE SET Name = Source.Name  
WHEN NOT MATCHED BY TARGET THEN  
	INSERT (SaleStatusId, Name) VALUES (SaleStatusId, Name)
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Sale] WITH CHECK CHECK CONSTRAINT [FK_Sale_SaleStatus];


GO
PRINT N'Update complete.';


GO
