/*
Deployment script for LicentaProducts

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "LicentaProducts"
:setvar DefaultFilePrefix "LicentaProducts"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'The following operation was generated from a refactoring log file 802b15ed-aced-425f-82b1-f05648d3f15a';

PRINT N'Rename [dbo].[CategoryLookup] to Category';


GO
EXECUTE sp_rename @objname = N'[dbo].[CategoryLookup]', @newname = N'Category', @objtype = N'OBJECT';


GO
PRINT N'Rename refactoring operation with key abb4ff58-0090-441b-bab3-0dc12c52dd2c is skipped, element [dbo].[Category].[RowVersion] (SqlSimpleColumn) will not be renamed to Row_Version';


GO
PRINT N'Rename refactoring operation with key 55b6b8e6-2c5b-4cf3-83a4-90f9be89f3de is skipped, element [dbo].[Products].[RowVersion] (SqlSimpleColumn) will not be renamed to Row_Version';


GO
PRINT N'Rename refactoring operation with key a435d733-9722-45d0-ab52-1138195747ab is skipped, element [dbo].[AditionalDetails].[Version] (SqlSimpleColumn) will not be renamed to Row_Version';


GO
PRINT N'Altering [dbo].[AditionalDetails]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER TABLE [dbo].[AditionalDetails]
    ADD [Date_Deleted] DATE NULL;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[Category]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER TABLE [dbo].[Category]
    ADD [Visible]      BIT  DEFAULT 0 NOT NULL,
        [Row_Version]  INT  DEFAULT 1 NOT NULL,
        [Date_Deleted] DATE NULL;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[Products]...';


GO
ALTER TABLE [dbo].[Products]
    ADD [Row_Version]  INT  DEFAULT 1 NOT NULL,
        [Date_Deleted] DATE NULL;


GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '802b15ed-aced-425f-82b1-f05648d3f15a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('802b15ed-aced-425f-82b1-f05648d3f15a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'abb4ff58-0090-441b-bab3-0dc12c52dd2c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('abb4ff58-0090-441b-bab3-0dc12c52dd2c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '55b6b8e6-2c5b-4cf3-83a4-90f9be89f3de')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('55b6b8e6-2c5b-4cf3-83a4-90f9be89f3de')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a435d733-9722-45d0-ab52-1138195747ab')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a435d733-9722-45d0-ab52-1138195747ab')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

MERGE INTO dbo.Category AS Target  
USING (VALUES (1,'Electronics'), 
			(2, 'Clothing'), 
			(3, 'Furniture'))  
       AS Source (CategoryId, Name)  
ON Target.CategoryId = Source.CategoryId  
WHEN MATCHED THEN  
	UPDATE SET Name = Source.Name  
WHEN NOT MATCHED BY TARGET THEN  
	INSERT (CategoryId, Name) VALUES (CategoryId, Name)
WHEN NOT MATCHED BY SOURCE THEN
	DELETE;
GO

GO
PRINT N'Update complete.';


GO
