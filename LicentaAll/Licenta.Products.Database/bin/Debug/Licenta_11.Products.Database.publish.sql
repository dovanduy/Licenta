/*
Deployment script for LicentaProducts

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "LicentaProducts"
:setvar DefaultFilePrefix "LicentaProducts"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Category]...';


GO
ALTER TABLE [dbo].[Category] DROP CONSTRAINT [DF__Category__Visibl__21B6055D];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Category]...';


GO
ALTER TABLE [dbo].[Category] DROP CONSTRAINT [DF__Category__Row_Ve__22AA2996];


GO
PRINT N'Dropping [dbo].[FK_Product_Category]...';


GO
ALTER TABLE [dbo].[Products] DROP CONSTRAINT [FK_Product_Category];


GO
PRINT N'Starting rebuilding table [dbo].[Category]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Category] (
    [CategoryId]   INT          IDENTITY (1, 1) NOT NULL,
    [Name]         VARCHAR (50) NOT NULL,
    [Visible]      BIT          DEFAULT 0 NOT NULL,
    [Row_Version]  INT          DEFAULT 1 NOT NULL,
    [Date_Deleted] DATE         NULL,
    PRIMARY KEY CLUSTERED ([CategoryId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Category])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Category] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Category] ([CategoryId], [Name], [Visible], [Row_Version], [Date_Deleted])
        SELECT   [CategoryId],
                 [Name],
                 [Visible],
                 [Row_Version],
                 [Date_Deleted]
        FROM     [dbo].[Category]
        ORDER BY [CategoryId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Category] OFF;
    END

DROP TABLE [dbo].[Category];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Category]', N'Category';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[FK_Product_Category]...';


GO
ALTER TABLE [dbo].[Products] WITH NOCHECK
    ADD CONSTRAINT [FK_Product_Category] FOREIGN KEY ([CategoryId]) REFERENCES [dbo].[Category] ([CategoryId]);


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

SET IDENTITY_INSERT dbo.Category ON
GO

MERGE INTO dbo.Category AS Target  
USING (VALUES (0,'Uncategorised',0))
       AS Source (CategoryId, Name, Visible)  
ON Target.CategoryId = Source.CategoryId  
WHEN MATCHED THEN  
	UPDATE SET 
			Name = Source.Name, 
			Visible = Source.Visible 
WHEN NOT MATCHED BY TARGET THEN  
	INSERT (SaleStatusId, Name, Visible) VALUES (SaleStatusId, Name, Visible);
GO

SET IDENTITY_INSERT dbo.Category OFF
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Products] WITH CHECK CHECK CONSTRAINT [FK_Product_Category];


GO
PRINT N'Update complete.';


GO
