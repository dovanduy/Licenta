/*
Deployment script for LicentaProducts

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "LicentaProducts"
:setvar DefaultFilePrefix "LicentaProducts"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'The following operation was generated from a refactoring log file 20509289-2671-450c-898c-f598d4c06f78';

PRINT N'Rename [dbo].[Products].[ProductId] to Id';


GO
EXECUTE sp_rename @objname = N'[dbo].[Products].[ProductId]', @newname = N'Id', @objtype = N'COLUMN';


GO
PRINT N'The following operation was generated from a refactoring log file 410a62f7-5784-41cf-b933-ad93efe32e38';

PRINT N'Rename [dbo].[Category].[CategoryId] to Id';


GO
EXECUTE sp_rename @objname = N'[dbo].[Category].[CategoryId]', @newname = N'Id', @objtype = N'COLUMN';


GO
PRINT N'The following operation was generated from a refactoring log file a2b1db48-2237-42f7-a470-3ddedf160d5e';

PRINT N'Rename [dbo].[AditionalDetails].[AditionalDetailId] to Id';


GO
EXECUTE sp_rename @objname = N'[dbo].[AditionalDetails].[AditionalDetailId]', @newname = N'Id', @objtype = N'COLUMN';


GO
PRINT N'Altering [dbo].[AditionalDetails]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER TABLE [dbo].[AditionalDetails]
    ADD [Row_Version] INT DEFAULT 1 NOT NULL;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '20509289-2671-450c-898c-f598d4c06f78')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('20509289-2671-450c-898c-f598d4c06f78')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '410a62f7-5784-41cf-b933-ad93efe32e38')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('410a62f7-5784-41cf-b933-ad93efe32e38')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a2b1db48-2237-42f7-a470-3ddedf160d5e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a2b1db48-2237-42f7-a470-3ddedf160d5e')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

SET IDENTITY_INSERT dbo.Category ON
GO

MERGE INTO dbo.Category AS Target  
USING (VALUES (0,'Uncategorised',0))
       AS Source (CategoryId, Name, Visible)  
ON Target.CategoryId = Source.CategoryId  
WHEN MATCHED THEN  
	UPDATE SET 
			Name = Source.Name, 
			Visible = Source.Visible 
WHEN NOT MATCHED BY TARGET THEN  
	INSERT (CategoryId, Name, Visible) VALUES (CategoryId, Name, Visible);
GO

SET IDENTITY_INSERT dbo.Category OFF
GO

GO
PRINT N'Update complete.';


GO
