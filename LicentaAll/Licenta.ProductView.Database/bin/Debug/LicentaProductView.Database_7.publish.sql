/*
Deployment script for LicentaProductView

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "LicentaProductView"
:setvar DefaultFilePrefix "LicentaProductView"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'The following operation was generated from a refactoring log file 2ff14189-69d2-441d-8e66-5f959038160e';

PRINT N'Rename [dbo].[AditionalDetails].[AditionalDetailId] to Id';


GO
EXECUTE sp_rename @objname = N'[dbo].[AditionalDetails].[AditionalDetailId]', @newname = N'Id', @objtype = N'COLUMN';


GO
PRINT N'The following operation was generated from a refactoring log file c703c700-ff65-411b-8c00-ae99219e30b0';

PRINT N'Rename [dbo].[Category].[CategoryId] to Id';


GO
EXECUTE sp_rename @objname = N'[dbo].[Category].[CategoryId]', @newname = N'Id', @objtype = N'COLUMN';


GO
PRINT N'The following operation was generated from a refactoring log file 846eb57f-aa43-4840-a0b2-4db2c7c12a1f';

PRINT N'Rename [dbo].[Products].[ProductId] to Id';


GO
EXECUTE sp_rename @objname = N'[dbo].[Products].[ProductId]', @newname = N'Id', @objtype = N'COLUMN';


GO
PRINT N'Altering [dbo].[AditionalDetails]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER TABLE [dbo].[AditionalDetails]
    ADD [Row_Version]  INT  DEFAULT 1 NOT NULL,
        [Date_Deleted] DATE NULL;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[Category]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER TABLE [dbo].[Category]
    ADD [Date_Deleted] DATE NULL;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[Products]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER TABLE [dbo].[Products]
    ADD [Date_Deleted] DATE NULL;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[ProductView]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[ProductView]
	AS SELECT
		p.Id,
		p.Name,
		p.Description,
		p.Price,
		IIF(p.Inventory>0,CAST(1 as bit),CAST(1 as bit)) as IsInStock,
		c.Id as CategoryId,
		c.Name as CategoryName,
		p.Rating 
	FROM [Products] p
	INNER JOIN Category c ON p.CategoryId = c.Id
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '2ff14189-69d2-441d-8e66-5f959038160e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('2ff14189-69d2-441d-8e66-5f959038160e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c703c700-ff65-411b-8c00-ae99219e30b0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c703c700-ff65-411b-8c00-ae99219e30b0')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '846eb57f-aa43-4840-a0b2-4db2c7c12a1f')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('846eb57f-aa43-4840-a0b2-4db2c7c12a1f')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

MERGE INTO dbo.Category AS Target  
USING (VALUES (0,'Uncategorised',0))
       AS Source (CategoryId, Name, Visible)  
ON Target.CategoryId = Source.CategoryId  
WHEN MATCHED THEN  
	UPDATE SET 
			Name = Source.Name, 
			Visible = Source.Visible 
WHEN NOT MATCHED BY TARGET THEN  
	INSERT (CategoryId, Name, Visible) VALUES (CategoryId, Name, Visible);
GO

GO
PRINT N'Update complete.';


GO
