

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "DataAccess\App.config"
//     Connection String Name: "Database"
//     Connection String:      "Data Source=STEFAN-LT\SQLEXPRESS;Initial Catalog=LicentaMonolith;Integrated Security=True"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace DataAccess
{
    using Newtonsoft.Json;

    #region Unit of work

    public interface IMonolithDbContext : Contracts.DataAccess.IDbContext
    {
        System.Data.Entity.DbSet<AditionalDetail> AditionalDetails { get; set; } // AditionalDetails
        System.Data.Entity.DbSet<Category> Categories { get; set; } // Category
        System.Data.Entity.DbSet<Inventory> Inventories { get; set; } // Inventory
        System.Data.Entity.DbSet<Product> Products { get; set; } // Product
        System.Data.Entity.DbSet<Reaction> Reactions { get; set; } // Reaction
        System.Data.Entity.DbSet<Review> Reviews { get; set; } // Review
        System.Data.Entity.DbSet<Sale> Sales { get; set; } // Sale
        System.Data.Entity.DbSet<SaleStatus> SaleStatus { get; set; } // SaleStatusLookup

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class MonolithDbContext : System.Data.Entity.DbContext, IMonolithDbContext
    {
        public System.Data.Entity.DbSet<AditionalDetail> AditionalDetails { get; set; } // AditionalDetails
        public System.Data.Entity.DbSet<Category> Categories { get; set; } // Category
        public System.Data.Entity.DbSet<Inventory> Inventories { get; set; } // Inventory
        public System.Data.Entity.DbSet<Product> Products { get; set; } // Product
        public System.Data.Entity.DbSet<Reaction> Reactions { get; set; } // Reaction
        public System.Data.Entity.DbSet<Review> Reviews { get; set; } // Review
        public System.Data.Entity.DbSet<Sale> Sales { get; set; } // Sale
        public System.Data.Entity.DbSet<SaleStatus> SaleStatus { get; set; } // SaleStatusLookup

        static MonolithDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MonolithDbContext>(null);
        }

        public MonolithDbContext()
            : base("Name=Database")
        {
        }

        public MonolithDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public MonolithDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public MonolithDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public MonolithDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AditionalDetailConfiguration());
            modelBuilder.Configurations.Add(new CategoryConfiguration());
            modelBuilder.Configurations.Add(new InventoryConfiguration());
            modelBuilder.Configurations.Add(new ProductConfiguration());
            modelBuilder.Configurations.Add(new ReactionConfiguration());
            modelBuilder.Configurations.Add(new ReviewConfiguration());
            modelBuilder.Configurations.Add(new SaleConfiguration());
            modelBuilder.Configurations.Add(new SaleStatusConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AditionalDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new CategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new InventoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductConfiguration(schema));
            modelBuilder.Configurations.Add(new ReactionConfiguration(schema));
            modelBuilder.Configurations.Add(new ReviewConfiguration(schema));
            modelBuilder.Configurations.Add(new SaleConfiguration(schema));
            modelBuilder.Configurations.Add(new SaleStatusConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region POCO classes

    // AditionalDetails
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class AditionalDetail: Contracts.DataAccess.IMaintainableEntity
    {
        public int Id { get; set; } // Id (Primary key)
        public int ProductId { get; set; } // ProductId
        public string Name { get; set; } // Name (length: 50)
        public string Text { get; set; } // Text (length: 5000)
        public System.DateTime? DateDeleted { get; set; } // Date_Deleted
        public int RowVersion { get; set; } // Row_Version

        // Foreign keys
        [JsonIgnore]
        public virtual Product Product { get; set; } // FK_AditionalDetails_Products

        public AditionalDetail()
        {
            RowVersion = 1;
        }
    }

    // Category
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Category: Contracts.DataAccess.IMaintainableEntity
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public bool Visible { get; set; } // Visible
        public int RowVersion { get; set; } // Row_Version
        public System.DateTime? DateDeleted { get; set; } // Date_Deleted

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Product> Products { get; set; } // Product.FK_Product_Category

        public Category()
        {
            Visible = false;
            RowVersion = 1;
            Products = new System.Collections.Generic.List<Product>();
        }
    }

    // Inventory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Inventory: Contracts.DataAccess.IMaintainableEntity
    {
        public int Id { get; set; } // Id (Primary key)
        public int ProductId { get; set; } // ProductId
        public int RowVersion { get; set; } // Row_Version
        public System.DateTime? DateDeleted { get; set; } // Date_Deleted
        public int WarehouseNumber { get; set; } // WarehouseNumber
        public int AreaCode { get; set; } // AreaCode
        public int ShelveNumber { get; set; } // ShelveNumber

        // Foreign keys
        [JsonIgnore]
        public virtual Product Product { get; set; } // FK_Inventory_Product

        public Inventory()
        {
            RowVersion = 1;
        }
    }

    // Product
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Product: Contracts.DataAccess.IMaintainableEntity
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 400)
        public string Description { get; set; } // Description (length: 5000)
        public int CategoryId { get; set; } // CategoryId
        public int RowVersion { get; set; } // Row_Version
        public System.DateTime? DateDeleted { get; set; } // Date_Deleted
        public decimal Price { get; set; } // Price
        public string ImageUrl { get; set; } // ImageUrl (length: 500)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<AditionalDetail> AditionalDetails { get; set; } // AditionalDetails.FK_AditionalDetails_Products
        public virtual System.Collections.Generic.ICollection<Inventory> Inventories { get; set; } // Inventory.FK_Inventory_Product
        public virtual System.Collections.Generic.ICollection<Review> Reviews { get; set; } // Review.FK_Review_Product
        public virtual System.Collections.Generic.ICollection<Sale> Sales { get; set; } // Sale.FK_Sale_Product

        // Foreign keys
        [JsonIgnore]
        public virtual Category Category { get; set; } // FK_Product_Category

        public Product()
        {
            RowVersion = 1;
            AditionalDetails = new System.Collections.Generic.List<AditionalDetail>();
            Inventories = new System.Collections.Generic.List<Inventory>();
            Reviews = new System.Collections.Generic.List<Review>();
            Sales = new System.Collections.Generic.List<Sale>();
        }
    }

    // Reaction
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Reaction: Contracts.DataAccess.IMaintainableEntity
    {
        public int Id { get; set; } // Id (Primary key)
        public bool? Reaction_ { get; set; } // Reaction
        public string UserId { get; set; } // UserId (length: 100)
        public int ReviewId { get; set; } // ReviewId
        public System.DateTime? DateDeleted { get; set; } // Date_Deleted
        public int RowVersion { get; set; } // Row_Version

        // Foreign keys
        [JsonIgnore]
        public virtual Review Review { get; set; } // FK_Reaction_Review

        public Reaction()
        {
            RowVersion = 1;
        }
    }

    // Review
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Review: Contracts.DataAccess.IMaintainableEntity
    {
        public int Id { get; set; } // Id (Primary key)
        public int ProductId { get; set; } // ProductId
        public string UserId { get; set; } // UserId (length: 100)
        public int Rating { get; set; } // Rating
        public string Text { get; set; } // Text (length: 5000)
        public string UserNickname { get; set; } // UserNickname (length: 100)
        public System.DateTime? DateDeleted { get; set; } // Date_Deleted
        public int RowVersion { get; set; } // Row_Version

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Reaction> Reactions { get; set; } // Reaction.FK_Reaction_Review

        // Foreign keys
        [JsonIgnore]
        public virtual Product Product { get; set; } // FK_Review_Product

        public Review()
        {
            RowVersion = 1;
            Reactions = new System.Collections.Generic.List<Reaction>();
        }
    }

    // Sale
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sale: Contracts.DataAccess.IMaintainableEntity
    {
        public int Id { get; set; } // Id (Primary key)
        public int ProductId { get; set; } // ProductId
        public int Items { get; set; } // Items
        public decimal Price { get; set; } // Price
        public int? SpecialOfferId { get; set; } // SpecialOfferId
        public decimal? PercentageDiscount { get; set; } // PercentageDiscount
        public string UserId { get; set; } // UserId (length: 500)
        public int OrderId { get; set; } // OrderId
        public int StatusId { get; set; } // StatusId
        public System.DateTime DateCreated { get; set; } // Date_Created
        public System.DateTime? DateStatusChanged { get; set; } // Date_StatusChanged
        public System.DateTime? DateDeleted { get; set; } // Date_Deleted
        public int RowVersion { get; set; } // Row_Version

        // Foreign keys
        [JsonIgnore]
        public virtual Product Product { get; set; } // FK_Sale_Product
        [JsonIgnore]
        public virtual SaleStatus SaleStatus { get; set; } // FK_Sale_SaleStatus

        public Sale()
        {
            StatusId = 1;
            DateCreated = System.DateTime.Now;
            RowVersion = 1;
        }
    }

    // SaleStatusLookup
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class SaleStatus
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Sale> Sales { get; set; } // Sale.FK_Sale_SaleStatus

        public SaleStatus()
        {
            Sales = new System.Collections.Generic.List<Sale>();
        }
    }

    #endregion

    #region POCO Configuration

    // AditionalDetails
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class AditionalDetailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AditionalDetail>
    {
        public AditionalDetailConfiguration()
            : this("dbo")
        {
        }

        public AditionalDetailConfiguration(string schema)
        {
            ToTable("AditionalDetails", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ProductId).HasColumnName(@"ProductId").IsRequired().HasColumnType("int");
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Text).HasColumnName(@"Text").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(5000);
            Property(x => x.DateDeleted).HasColumnName(@"Date_Deleted").IsOptional().HasColumnType("date");
            Property(x => x.RowVersion).HasColumnName(@"Row_Version").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Product).WithMany(b => b.AditionalDetails).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_AditionalDetails_Products
        }
    }

    // Category
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CategoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Category>
    {
        public CategoryConfiguration()
            : this("dbo")
        {
        }

        public CategoryConfiguration(string schema)
        {
            ToTable("Category", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Visible).HasColumnName(@"Visible").IsRequired().HasColumnType("bit");
            Property(x => x.RowVersion).HasColumnName(@"Row_Version").IsRequired().HasColumnType("int");
            Property(x => x.DateDeleted).HasColumnName(@"Date_Deleted").IsOptional().HasColumnType("date");
        }
    }

    // Inventory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class InventoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Inventory>
    {
        public InventoryConfiguration()
            : this("dbo")
        {
        }

        public InventoryConfiguration(string schema)
        {
            ToTable("Inventory", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProductId).HasColumnName(@"ProductId").IsRequired().HasColumnType("int");
            Property(x => x.RowVersion).HasColumnName(@"Row_Version").IsRequired().HasColumnType("int");
            Property(x => x.DateDeleted).HasColumnName(@"Date_Deleted").IsOptional().HasColumnType("date");
            Property(x => x.WarehouseNumber).HasColumnName(@"WarehouseNumber").IsRequired().HasColumnType("int");
            Property(x => x.AreaCode).HasColumnName(@"AreaCode").IsRequired().HasColumnType("int");
            Property(x => x.ShelveNumber).HasColumnName(@"ShelveNumber").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Product).WithMany(b => b.Inventories).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_Inventory_Product
        }
    }

    // Product
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class ProductConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Product>
    {
        public ProductConfiguration()
            : this("dbo")
        {
        }

        public ProductConfiguration(string schema)
        {
            ToTable("Product", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(400);
            Property(x => x.Description).HasColumnName(@"Description").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(5000);
            Property(x => x.CategoryId).HasColumnName(@"CategoryId").IsRequired().HasColumnType("int");
            Property(x => x.RowVersion).HasColumnName(@"Row_Version").IsRequired().HasColumnType("int");
            Property(x => x.DateDeleted).HasColumnName(@"Date_Deleted").IsOptional().HasColumnType("date");
            Property(x => x.Price).HasColumnName(@"Price").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ImageUrl).HasColumnName(@"ImageUrl").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(500);

            // Foreign keys
            HasRequired(a => a.Category).WithMany(b => b.Products).HasForeignKey(c => c.CategoryId).WillCascadeOnDelete(false); // FK_Product_Category
        }
    }

    // Reaction
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class ReactionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Reaction>
    {
        public ReactionConfiguration()
            : this("dbo")
        {
        }

        public ReactionConfiguration(string schema)
        {
            ToTable("Reaction", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Reaction_).HasColumnName(@"Reaction").IsOptional().HasColumnType("bit");
            Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.ReviewId).HasColumnName(@"ReviewId").IsRequired().HasColumnType("int");
            Property(x => x.DateDeleted).HasColumnName(@"Date_Deleted").IsOptional().HasColumnType("date");
            Property(x => x.RowVersion).HasColumnName(@"Row_Version").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Review).WithMany(b => b.Reactions).HasForeignKey(c => c.ReviewId).WillCascadeOnDelete(false); // FK_Reaction_Review
        }
    }

    // Review
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class ReviewConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Review>
    {
        public ReviewConfiguration()
            : this("dbo")
        {
        }

        public ReviewConfiguration(string schema)
        {
            ToTable("Review", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ProductId).HasColumnName(@"ProductId").IsRequired().HasColumnType("int");
            Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Rating).HasColumnName(@"Rating").IsRequired().HasColumnType("int");
            Property(x => x.Text).HasColumnName(@"Text").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(5000);
            Property(x => x.UserNickname).HasColumnName(@"UserNickname").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.DateDeleted).HasColumnName(@"Date_Deleted").IsOptional().HasColumnType("date");
            Property(x => x.RowVersion).HasColumnName(@"Row_Version").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Product).WithMany(b => b.Reviews).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_Review_Product
        }
    }

    // Sale
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class SaleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sale>
    {
        public SaleConfiguration()
            : this("dbo")
        {
        }

        public SaleConfiguration(string schema)
        {
            ToTable("Sale", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ProductId).HasColumnName(@"ProductId").IsRequired().HasColumnType("int");
            Property(x => x.Items).HasColumnName(@"Items").IsRequired().HasColumnType("int");
            Property(x => x.Price).HasColumnName(@"Price").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.SpecialOfferId).HasColumnName(@"SpecialOfferId").IsOptional().HasColumnType("int");
            Property(x => x.PercentageDiscount).HasColumnName(@"PercentageDiscount").IsOptional().HasColumnType("decimal").HasPrecision(4,2);
            Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(500);
            Property(x => x.OrderId).HasColumnName(@"OrderId").IsRequired().HasColumnType("int");
            Property(x => x.StatusId).HasColumnName(@"StatusId").IsRequired().HasColumnType("int");
            Property(x => x.DateCreated).HasColumnName(@"Date_Created").IsRequired().HasColumnType("date");
            Property(x => x.DateStatusChanged).HasColumnName(@"Date_StatusChanged").IsOptional().HasColumnType("date");
            Property(x => x.DateDeleted).HasColumnName(@"Date_Deleted").IsOptional().HasColumnType("date");
            Property(x => x.RowVersion).HasColumnName(@"Row_Version").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Product).WithMany(b => b.Sales).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_Sale_Product
            HasRequired(a => a.SaleStatus).WithMany(b => b.Sales).HasForeignKey(c => c.StatusId).WillCascadeOnDelete(false); // FK_Sale_SaleStatus
        }
    }

    // SaleStatusLookup
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class SaleStatusConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SaleStatus>
    {
        public SaleStatusConfiguration()
            : this("dbo")
        {
        }

        public SaleStatusConfiguration(string schema)
        {
            ToTable("SaleStatusLookup", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
        }
    }

    #endregion

}
// </auto-generated>

